Properties of Binary Trees
--------------------------------------------------------------------------------------------
- Maximum number of nodes at level l: 2^l
- Maximum number of nodes at height h: 2^(h+1) - 1
- In a binary tree with N nodes, minimum possible height: |log2(N+1) - 1
- A binary tree with L leaves has at least: |log2L| + 1 levels
- Height of binary tree is the longest path from the root node to any leaf node in the tree


Types of Binary Trees
--------------------------------------------------------------------------------------------
Full Binary Tree: every node has 0 or 2 children
               18               
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40 

             18
           /    \   
         15     20    
        /  \       
      40    50   
    /   \
   30   50

               18
            /     \  
          40       30  
                   /  \
                 100   40

Complete Binary Tree: all levels are completely filled except possibly the last level and the 
    last level has all keys as left as possible
               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40


               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40
     /  \   /
    8   7  9 

Perfect Binary Tree: all the internal nodes have two children and all leaf nodes are at the 
    same level
- The number of leaf nodes is the number of internal nodes plus 1
- L = l + 1; L = number of leaf nodes, l = number of internal nodes
- 2^h - 1 nodes, h = height
               18
           /       \  
         15         30  
        /  \        /  \
      40    50    100   40

               18
           /       \  
         15         30  


Balanced Binary Tree
--------------------------------------------------------------------------------------------
- A Binary Tree in which the left and right subtrees of every node differ in height by 
    no more than 1
- A Binary Tree is balanced if the height of the tree is O(log n), where n = number of nodes
- Good performance-wise, O(log n) for search, insert, delete


Degenerate (Pathological) Tree
--------------------------------------------------------------------------------------------
- A tree where every internal node has one child
- Same performance as linked list
      10
      /
    20
     \
     30
      \
      40

Tree Traversals
--------------------------------------------------------------------------------------------
               1
           /       \  
          2         3  
        /  \        
      4     5       

- Inorder (left, Root, right): 4 2 5 1 3
- Preorder (Root, left, right): 1 2 4 5 3
- Postorder (left, right, Root): 4 5 2 3 1
- Breadth First/Level Order: 1 2 3 4 5

Uses of Inorder
- Inorder Traversal gives nodes in non-decreasing order

Uses of Preorder
- Preorder Traversal is used to create a copy of a tree 
- Also used to get prefix expression of an expression tree

Uses of Postorder
- Postorder Traversal is used to delete the tree